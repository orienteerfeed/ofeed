// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

model Country {
  countryCode String @id @db.Char(2)
  countryName String
  events      Event[]
}

model RankingCzech {
  id            Int     @id @default(autoincrement()) @db.UnsignedInt
  place         Int
  firstName     String
  lastName      String
  registration  String  @unique @db.VarChar(10)
  points        Int
  rankIndex     Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Sport {
  id     Int     @id @default(autoincrement()) @db.UnsignedInt
  name   String  @unique
  events Event[]
}

model User {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  email     String   @unique
  firstname String
  lastname  String
  organisation String?
  password  String   @db.VarChar(255)
  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
  protocols Protocol[]
  oAuthClients OAuthClient[]
  oAuthAccessToken OAuthAccessToken[]
  oAuthAuthorizationCode OAuthAuthorizationCode[]
  oAuthRefreshToken OAuthRefreshToken[]
}

model Event {
  id        String   @id @default(cuid())
  sport     Sport    @relation(fields: [sportId], references: [id])
  sportId   Int      @db.UnsignedInt
  name      String
  organizer String?
  date      DateTime @db.Date
  timezone  String   @default("Europe/Prague")
  location  String?
  latitude  Float?   // GPS Latitude (nullable)
  longitude Float?   // GPS Longitude (nullable)
  countryId String?  @db.Char(2)
  country   Country? @relation(fields: [countryId], references: [countryCode])
  zeroTime  DateTime @db.DateTime()
  relay     Boolean  @default(false)
  startMode StartMode @default(Individual)
  ranking   Boolean  @default(false)
  coefRanking Float?
  hundredthPrecision Boolean  @default(false) // Measure finish time in hundredths of a second
  published Boolean  @default(false)
  demo      Boolean  @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?     @db.UnsignedInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes   Class[]
  protocols Protocol[]
  eventPasswords EventPassword[]
  @@fulltext([name, organizer, location])
}

model Class {
  id               Int          @id @default(autoincrement()) @db.UnsignedInt
  event            Event        @relation(fields: [eventId], references: [id])
  eventId          String
  externalId       String?
  name             String
  startName        String?
  length           Int?
  climb            Int?
  controlsCount    Int?
  competitorsCount Int?
  printedMaps      Int?
  minAge           Int?
  maxAge           Int?
  minTeamMembers   Int?
  maxTeamMembers   Int?
  sex              Sex          @default(B)
  status           ClassStatus  @default(NORMAL)
  competitors      Competitor[]
  teams            Team[]
}

model Competitor {
  id            Int          @id @default(autoincrement()) @db.UnsignedInt
  class         Class        @relation(fields: [classId], references: [id])
  classId       Int          @db.UnsignedInt
  firstname     String
  lastname      String
  bibNumber     Int?
  nationality   String?      @db.Char(3)
  registration  String       @db.VarChar(10)
  license       String?      @db.Char(1)
  ranking       Int?         @db.UnsignedInt
  rankPointsAvg Int?         @db.UnsignedInt
  organisation  String?
  shortName     String?      @db.VarChar(10)
  card          Int?         @db.UnsignedInt
  startTime     DateTime?
  finishTime    DateTime?
  time          Int?
  team          Team?        @relation(fields: [teamId], references: [id])
  teamId        Int?         @db.UnsignedInt
  leg           Int?         @db.UnsignedInt
  status        ResultStatus @default(Inactive)
  lateStart     Boolean      @default(false)
  note          String?
  updatedAt     DateTime     @default(now()) @updatedAt
  externalId    String?
  protocols     Protocol[]
  splits        Split[]
}

model Split {
  id            Int          @id @default(autoincrement()) @db.UnsignedInt
  competitorId  Int          @db.UnsignedInt
  competitor    Competitor   @relation(fields: [competitorId], references: [id])
  controlCode   Int
  time          Int?
}

model Team {
  id            Int          @id @default(autoincrement()) @db.UnsignedInt
  class         Class        @relation(fields: [classId], references: [id])
  classId       Int          @db.UnsignedInt
  name          String
  organisation  String?
  shortName     String?      @db.VarChar(10)
  bibNumber     Int
  competitors   Competitor[]
}

model Protocol {
  id            Int          @id @default(autoincrement()) @db.UnsignedInt
  event         Event        @relation(fields: [eventId], references: [id])
  eventId       String
  competitor    Competitor   @relation(fields: [competitorId], references: [id])
  competitorId  Int          @db.UnsignedInt
  origin        Origin
  type          ProtocolType
  previousValue String?
  newValue      String
  author        User         @relation(fields: [authorId], references: [id])
  authorId      Int          @db.UnsignedInt
  createdAt     DateTime     @default(now())
}

model EventPassword {
  id        String   @id @default(cuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String   @unique
  password  String   @db.VarChar(255)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OAuthClient {
  id                 String       @id @default(cuid())
  clientId           String       @unique @db.VarChar(255)
  clientSecret       String       @db.VarChar(255)
  createdAt          DateTime     @default(now())
  user               User         @relation(fields: [userId], references: [id])
  userId             Int          @db.UnsignedInt
  accessTokens       OAuthAccessToken[]
  authorizationCodes OAuthAuthorizationCode[]
  grants             OAuthGrant[]
  redirectUris       OAuthRedirectUri[]
  refreshTokens      OAuthRefreshToken[]
  scopes             OAuthScope[]
}

model OAuthGrant {
  id        String       @id @default(cuid())
  client    OAuthClient  @relation(fields: [clientId], references: [id])
  clientId  String
  grantType String       @db.VarChar(255)
}

model OAuthScope {
  id       String       @id @default(cuid())
  client   OAuthClient  @relation(fields: [clientId], references: [id])
  clientId String
  scope    String       @db.VarChar(255)
}

model OAuthRedirectUri {
  id       String       @id @default(cuid())
  client   OAuthClient  @relation(fields: [clientId], references: [id])
  clientId String
  uri      String       @db.VarChar(255)
}

model OAuthAccessToken {
  id        String       @id @default(cuid())
  token     String       @db.VarChar(1024)
  client    OAuthClient  @relation(fields: [clientId], references: [id])
  clientId  String
  user      User?        @relation(fields: [userId], references: [id])
  userId    Int?         @db.UnsignedInt
  expiresAt DateTime
}

model OAuthAuthorizationCode {
  id          String       @id @default(cuid())
  code        String       @unique @db.VarChar(255)
  client      OAuthClient  @relation(fields: [clientId], references: [id])
  clientId    String
  user        User?        @relation(fields: [userId], references: [id])
  userId      Int?         @db.UnsignedInt
  expiresAt   DateTime
  redirectUri String       @db.VarChar(255)
}

model OAuthRefreshToken {
  id        String       @id @default(cuid())
  token     String       @db.VarChar(1024)
  client    OAuthClient  @relation(fields: [clientId], references: [id])
  clientId  String
  user      User?        @relation(fields: [userId], references: [id])
  userId    Int?         @db.UnsignedInt
  expiresAt DateTime
}

model PasswordReset {
  email     String  @id
  token     String
  createdAt DateTime @default(now())
}

enum Sex {
  B
  M
  F
}

enum ClassStatus {
  NORMAL
  DIVIDED
  JOINED
  INVALIDATED
  INVALIDATEDNOFEE
}

enum ResultStatus {
  OK
  Finished
  MissingPunch
  Disqualified
  DidNotFinish
  Active
  Inactive
  OverTime
  SportingWithdrawal
  NotCompeting
  Moved
  MovedUp
  DidNotStart
  DidNotEnter
  Cancelled
}

enum Origin {
  START
  OFFICE
  FINISH
  IT
}

enum ProtocolType {
  competitor_create
  competitor_update
  class_change
  firstname_change
  lastname_change
  bibNumber_change
  nationality_change
  registration_change
  license_change
  ranking_change
  rank_points_avg_change
  organisation_change
  short_name_change
  si_card_change
  start_time_change
  finish_time_change
  time_change
  team_change
  leg_change
  status_change
  late_start_change
  note_change
  external_id_change
}

enum StartMode {
  Individual
  Mass
  Handicap
  Pursuit
  Wave
  ScoreO
}